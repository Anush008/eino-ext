// Code generated by MockGen. DO NOT EDIT.
// Source: code.byted.org/overpass/stone_llm_gateway/kitex_gen/stone/llm/gateway/llmgatewayservice (interfaces: LLMGatewayService_ChatClient)
//
// Generated by this command:
//
//	mockgen -destination internal/mock/llmgatewayservice/ChatClient.go --package llmgatewayservice code.byted.org/overpass/stone_llm_gateway/kitex_gen/stone/llm/gateway/llmgatewayservice LLMGatewayService_ChatClient
//

// Package llmgatewayservice is a generated GoMock package.
package llmgatewayservice

import (
	context "context"
	reflect "reflect"

	gateway "code.byted.org/overpass/stone_llm_gateway/kitex_gen/stone/llm/gateway"
	metadata "github.com/cloudwego/kitex/pkg/remote/trans/nphttp2/metadata"
	gomock "go.uber.org/mock/gomock"
)

// MockLLMGatewayService_ChatClient is a mock of LLMGatewayService_ChatClient interface.
type MockLLMGatewayService_ChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockLLMGatewayService_ChatClientMockRecorder
	isgomock struct{}
}

// MockLLMGatewayService_ChatClientMockRecorder is the mock recorder for MockLLMGatewayService_ChatClient.
type MockLLMGatewayService_ChatClientMockRecorder struct {
	mock *MockLLMGatewayService_ChatClient
}

// NewMockLLMGatewayService_ChatClient creates a new mock instance.
func NewMockLLMGatewayService_ChatClient(ctrl *gomock.Controller) *MockLLMGatewayService_ChatClient {
	mock := &MockLLMGatewayService_ChatClient{ctrl: ctrl}
	mock.recorder = &MockLLMGatewayService_ChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMGatewayService_ChatClient) EXPECT() *MockLLMGatewayService_ChatClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLLMGatewayService_ChatClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).Close))
}

// Context mocks base method.
func (m *MockLLMGatewayService_ChatClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLLMGatewayService_ChatClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLLMGatewayService_ChatClient) Recv() (*gateway.ChatCompletion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*gateway.ChatCompletion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLLMGatewayService_ChatClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).RecvMsg), m)
}

// SendHeader mocks base method.
func (m *MockLLMGatewayService_ChatClient) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLLMGatewayService_ChatClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLLMGatewayService_ChatClient) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLLMGatewayService_ChatClient) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).SetTrailer), arg0)
}

// Trailer mocks base method.
func (m *MockLLMGatewayService_ChatClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLLMGatewayService_ChatClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLLMGatewayService_ChatClient)(nil).Trailer))
}
