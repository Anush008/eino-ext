// Code generated by MockGen. DO NOT EDIT.
// Source: code.byted.org/flowdevops/fornax_sdk (interfaces: IClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock/fornax/Fornax_Client_mock.go -package=fornax code.byted.org/flowdevops/fornax_sdk IClient
//

// Package fornax is a generated GoMock package.
package fornax

import (
	context "context"
	reflect "reflect"

	domain "code.byted.org/flowdevops/fornax_sdk/domain"
	knowledge "code.byted.org/flowdevops/fornax_sdk/domain/knowledge"
	node "code.byted.org/flowdevops/fornax_sdk/domain/node"
	prompt "code.byted.org/flowdevops/fornax_sdk/domain/prompt"
	ob "code.byted.org/flowdevops/fornax_sdk/infra/ob"
	flow_interface "code.byted.org/obric/flow_telemetry_go/v2/flow_interface"
	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// ExecutePrompt mocks base method.
func (m *MockIClient) ExecutePrompt(arg0 context.Context, arg1 *prompt.ExecutePromptParam, arg2 ...prompt.Option) (*prompt.ExecutePromptResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecutePrompt", varargs...)
	ret0, _ := ret[0].(*prompt.ExecutePromptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutePrompt indicates an expected call of ExecutePrompt.
func (mr *MockIClientMockRecorder) ExecutePrompt(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePrompt", reflect.TypeOf((*MockIClient)(nil).ExecutePrompt), varargs...)
}

// GetPrompt mocks base method.
func (m *MockIClient) GetPrompt(arg0 context.Context, arg1 *prompt.GetPromptParam, arg2 ...prompt.Option) (*prompt.GetPromptResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrompt", varargs...)
	ret0, _ := ret[0].(*prompt.GetPromptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrompt indicates an expected call of GetPrompt.
func (mr *MockIClientMockRecorder) GetPrompt(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompt", reflect.TypeOf((*MockIClient)(nil).GetPrompt), varargs...)
}

// GetSpanFromContext mocks base method.
func (m *MockIClient) GetSpanFromContext(arg0 context.Context) ob.FornaxSpan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanFromContext", arg0)
	ret0, _ := ret[0].(ob.FornaxSpan)
	return ret0
}

// GetSpanFromContext indicates an expected call of GetSpanFromContext.
func (mr *MockIClientMockRecorder) GetSpanFromContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanFromContext", reflect.TypeOf((*MockIClient)(nil).GetSpanFromContext), arg0)
}

// PullNode mocks base method.
func (m *MockIClient) PullNode(arg0 context.Context, arg1 *node.PullNodeParam) (*node.PullNodeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullNode", arg0, arg1)
	ret0, _ := ret[0].(*node.PullNodeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullNode indicates an expected call of PullNode.
func (mr *MockIClientMockRecorder) PullNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullNode", reflect.TypeOf((*MockIClient)(nil).PullNode), arg0, arg1)
}

// RetrieveKnowledge mocks base method.
func (m *MockIClient) RetrieveKnowledge(arg0 context.Context, arg1 *knowledge.RetrieveKnowledgeParams) (*knowledge.RetrieveKnowledgeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveKnowledge", arg0, arg1)
	ret0, _ := ret[0].(*knowledge.RetrieveKnowledgeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKnowledge indicates an expected call of RetrieveKnowledge.
func (mr *MockIClientMockRecorder) RetrieveKnowledge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKnowledge", reflect.TypeOf((*MockIClient)(nil).RetrieveKnowledge), arg0, arg1)
}

// StartSpan mocks base method.
func (m *MockIClient) StartSpan(arg0 context.Context, arg1, arg2 string, arg3 ...flow_interface.FlowStartSpanOption) (ob.FornaxSpan, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpan", varargs...)
	ret0, _ := ret[0].(ob.FornaxSpan)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockIClientMockRecorder) StartSpan(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockIClient)(nil).StartSpan), varargs...)
}

// StreamExecutePrompt mocks base method.
func (m *MockIClient) StreamExecutePrompt(arg0 context.Context, arg1 *prompt.ExecutePromptParam, arg2 ...prompt.Option) (*domain.ExecutePromptStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamExecutePrompt", varargs...)
	ret0, _ := ret[0].(*domain.ExecutePromptStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamExecutePrompt indicates an expected call of StreamExecutePrompt.
func (mr *MockIClientMockRecorder) StreamExecutePrompt(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecutePrompt", reflect.TypeOf((*MockIClient)(nil).StreamExecutePrompt), varargs...)
}
